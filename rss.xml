<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>Akim_Shuyue</title>
        <link>http://sosxisang.github.io</link>
        <description>wir müssen wissen,wir werden wissen.</description>
        <lastBuildDate>Tue, 09 Jul 2013 00:00:00 GMT</lastBuildDate>
        <language>zh-cn</language>
        <item>
<title>低幼向数列求和的数学证明</title>
<link>http://sosxisang.github.io/articles/1+2+…+n.html</link>
<guid>http://sosxisang.github.io/articles/1+2+…+n.html</guid>
<author>sosxisang@gmail.com Akim</author>
<pubDate>Tue, 09 Jul 2013 00:00:00 GMT</pubDate>
<description>&lt;h1&gt;1+2+…+n&lt;/h1&gt;
&lt;p&gt;数学看起来容易的东西, 大多不简单. 想辩, 请戳&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E5%93%A5%E5%BE%B7%E5%B7%B4%E8%B5%AB%E7%8C%9C%E6%83%B3&quot;&gt;歌德巴赫猜想&lt;/a&gt; （不要再告诉我哥德巴赫猜想是1+1=2了, 数学工作者很容易受不住的. ）&lt;/p&gt;
&lt;p&gt;以上叫做引言. &lt;/p&gt;
&lt;p&gt;为了试试&lt;a href=&quot;http://mouapp.com/&quot;&gt;mou&lt;/a&gt;软件以及传说中的blog, 我来码篇证明. 嗯, 这是漫谈——不然坑自己坑大了……&lt;/p&gt;
&lt;h1&gt;今天的目标是证明\(\sum_{i=1}^{n}{i}={n \choose 2}\)&lt;/h1&gt;
&lt;p&gt;几点说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;求和号\(\sum_{i=1}^{n}{i}\)来表示\(1+2+...+n\)&lt;/li&gt;
&lt;li&gt;二项式系数\({n \choose k}\)——任何有n个元素的集合, 由其衍生出拥有k个元素的子集, 即由其中任意k个元素的组合, 共有\({n \choose k}\)个. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;e.g.&lt;/strong&gt;(话说e.g.是拉丁语exempli gratia的缩写哟, 无视我= =)&lt;/p&gt;
&lt;p&gt;有7个男孩子, 要挑出2个搞基, 有多少中不同的组合方式呢? &lt;/p&gt;
&lt;p&gt;就是\({7 \choose 2}\)个. &lt;strong&gt;显然&lt;/strong&gt;（我大学本科被这个词汇虐爆了, 我终于可以用上了! ! ! ）, 这里的7对应上述的n, 2对应上述的k. &lt;/p&gt;
&lt;p&gt;好了, 我们可以开始证明了. 不对, 这是个粗糙的叙述——有辱师门. &lt;/p&gt;
&lt;p&gt;哎呀, 先扯一会儿. 这个证明我第一次听说是&lt;a href=&quot;http://www.chaoxuprime.com/about.html&quot;&gt;Mgccl&lt;/a&gt;在咖啡厅讲的, 据说他是在波士顿还是哪儿的数学会上看到的. 当时, 我就惊呆了! （又可以无视我了……）后来, 看到别人整理的一个proof without words的证明帖子上也有这个. &lt;/p&gt;
&lt;p&gt;主要的想法就是下面这张图. 如果你一眼就看懂了, 那就不要看下述了, 浪费生命. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.sciencenet.cn/home/141508y6qs07yqzhgzl06c.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;小球如图堆叠而成, 第1行有1个, …, 第i行有i个, …, 第n行有n个, 第n+1行有n+1. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第n+1行的&lt;strong&gt;任意&lt;/strong&gt;两个小球的组合向上可对应第1到n行的&lt;strong&gt;某&lt;/strong&gt;一个小球, 且不同的两个小球的组合对应的小球不同. &lt;/li&gt;
&lt;li&gt;第1到n行的&lt;strong&gt;任意&lt;/strong&gt;一个小球可对应第n+1行的&lt;strong&gt;某&lt;/strong&gt;两个小球的组合, 且不同的小球对应两个小球的组合不同. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样, 集合A={第n+1行的两个小球的组合}与集合B={第1到n行的小球}一一对应. 
因而, 这两个集合的元素个数相等, 即\(\sum_{i=1}^{n}{i}={n \choose 2}\)&lt;/p&gt;
&lt;p&gt;最后, 为了挽回师门的一些颜面, 说点数学的东西. &lt;/p&gt;
&lt;p&gt;上述对应实质上是映射——两个集合间的对应关系. 
A到B是一个&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E5%8D%95%E5%B0%84%E3%80%81%E5%8F%8C%E5%B0%84%E4%B8%8E%E6%BB%A1%E5%B0%84&quot;&gt;单射&lt;/a&gt;; B到A是一个单射. &lt;/p&gt;
&lt;p&gt;A到B是一一映射(双射).&lt;/p&gt;
</description>
</item>
<item>
<title>Git和GitHub动手玩</title>
<link>http://sosxisang.github.io/articles/howto-use-simplog-on-windows7-to-deploy-github-pages-2.html</link>
<guid>http://sosxisang.github.io/articles/howto-use-simplog-on-windows7-to-deploy-github-pages-2.html</guid>
<author>sosxisang@gmail.com Akim</author>
<pubDate>Wed, 03 Jul 2013 00:00:00 GMT</pubDate>
<description>&lt;h1&gt;Git和GitHub动手玩&lt;/h1&gt;
&lt;p&gt;上一篇文章简单介绍了一些预备知识（是的我知道很枯燥-_-）。
本文将会介绍实际的使用方法。最好学习方法就是自己动手，丰衣足食。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先你需要先在GitHub上注册属于自己的用户名。这个过程就不写了，如果你这都不会，老天也帮不了你了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击&lt;strong&gt;New Repository&lt;/strong&gt;新建一个Repository。&lt;/p&gt;
&lt;p class=&quot;picture&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;/uploads/pictures/howto-use-simplog-on-windows7-to-deploy-github-pages-2/New_Repository.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;填写&lt;strong&gt;Repository name&lt;/strong&gt;，这是一个例子，所以起名叫做&lt;pre class=&quot;prettyprint&quot;&gt;example&lt;/pre&gt;
权限就保持默认的public不变。
如果选中&lt;strong&gt;Initialize this repository with a README&lt;/strong&gt;这个复选框，GitHub就会帮你在你的Repository下创建一个README.md文件。
暂时不用勾选，因为我们马上就会学习如何通过Git来上传一个README到这个新创建的Repository。效果和选中这个复选框是一样的。&lt;/p&gt;
&lt;p class=&quot;picture&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;/uploads/pictures/howto-use-simplog-on-windows7-to-deploy-github-pages-2/name_your_repository.png&quot;/&gt;&lt;/p&gt;
点击&lt;strong&gt;Create repository&lt;/strong&gt;。创建成功后，页面上会提供一些提示，告诉我们应该如何使用Git命令在本地初始化一个仓库。
&lt;p class=&quot;picture&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;/uploads/pictures/howto-use-simplog-on-windows7-to-deploy-github-pages-2/quick_setup.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接下来我们来配置计算机的Git环境。
点击&lt;a href=&quot;http://code.google.com/p/msysgit/downloads/list&quot;&gt;msysgit&lt;/a&gt;下载Git安装包，然后在你的Windows7上安装Git。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;5.&lt;/p&gt;
</description>
</item>
<item>
<title>初识Git和GitHub</title>
<link>http://sosxisang.github.io/articles/howto-use-simplog-on-windows7-to-deploy-github-pages-1.html</link>
<guid>http://sosxisang.github.io/articles/howto-use-simplog-on-windows7-to-deploy-github-pages-1.html</guid>
<author>sosxisang@gmail.com Akim</author>
<pubDate>Mon, 01 Jul 2013 00:00:00 GMT</pubDate>
<description>&lt;p&gt;我打算用两到三篇文章来介绍一下我是怎样搭建我的博客的。
不在一篇文章里面写完的原因一方面是因为我想尽可能写得详细一些，这样的话难免导致可能一个月都更新不了博客。
另一方面是因为太长的文章总是很难看下去的，特别技术类的文章。&lt;/p&gt;
&lt;p&gt;要部署一个静态博客，需要掌握很多方面的知识，这是一个相当困难的过程，尤其是对没有太多计算机专业知识的人来说。
看到之前从来没有听说过的名词和命令是非常正常的。希望这篇文章能让你少走一些弯路。&lt;/p&gt;
&lt;h1&gt;Git和GitHub&lt;/h1&gt;
&lt;h2&gt;Git是什么？&lt;/h2&gt;
&lt;p&gt;简单来说，&lt;a href=&quot;http://zh.wikipedia.org/wiki/Git&quot;&gt;Git&lt;/a&gt;是一个分布式的版本控制工具。
什么叫做版本控制？当你在开发一款软件，比如一个微博客户端或者别的什么，都会需要release一个又一个版本。
每一个新的版本都会比老的版本有很多改进，功能上的，UI界面上的，或是修复bug等等。
同一个软件会有很多人开发不同的部分，有的部分可能也也会有很多人一起开发。&lt;/p&gt;
&lt;p&gt;那么问题就来了。
如果开发人员A和开发人员B同时修改了同一段代码怎么版？
如果开发人员A修改了某处的代码那开发人员B要怎么样才能知道呢？
有的时候甚至在修复了一个功能的同时又会引入另外一个新的问题，而当时根本没有意识到，等发现的时候要怎样才能知道是什么时候哪里的修改出的问题呢？&lt;/p&gt;
&lt;p&gt;当软件规模小的时候还能依靠人的记忆来解决问题，但是当软件逐渐变得很庞大的时候，如果没有一个追溯的方法来跟踪这些代码的改动，那么前面提到的问题产生的原因就会变得很难解决，整个项目代码就会乱成一团。&lt;/p&gt;
&lt;p&gt;但是你肯定从来没有听说过微软和谷歌的家伙们为了这些事你打我我打你打得死去活来的吧？你不禁要问，这是为啥？&lt;/p&gt;
&lt;p&gt;因为他们用了版本控制工具比如Git来帮助他们协同工作。Git可以记录每一次提交的修改，你可以回退到任何一个版本，可以建立分支也可以合并到主干，可以比较同一个文件不同版本的区别等等。
总之Git功能非常强大，能让协作的效率成倍提升。绝大多数版本控制工具（比如subversion、Mercurial(Hg)、CVS等等）都提供这些基本的功能，但是Git还具有分布式的特性，非常高端洋气，还有一个原因就是Git是Linux它爹为了写Linux捣鼓出来的。&lt;/p&gt;
&lt;p&gt;Git的学习曲线比较陡，虽然现在Git也有了图形化的界面，但是使用Git的人当中80%仍然是用命令行的方式的。
我个人也推荐用命令行的方式来使用Git，因为命令行能让你更精确地理解Git是如何工作的，也能让你明白自己在做什么。&lt;/p&gt;
&lt;p&gt;不过不必担心，在搭建博客的过程中用到的Git命令并不多（应该说是非常少。。），也用不到分布式等等的特性。
假如有兴趣想要深入学习Git，可以购买&lt;a href=&quot;http://www.worldhello.net/gotgit/&quot;&gt;《Git权威指南》&lt;/a&gt;。
或者查找网上的各种Git教程，比如这个&lt;a href=&quot;http://www.ralfebert.de/tutorials/git/&quot;&gt;Git Tutorial&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;GitHub&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;是一个代码托管网站，相当于一个仓库。
用户可以为自己的项目代码建立一个代码仓库（&lt;em&gt;Repository&lt;/em&gt;），然后用Git把自己的代码放到这个仓库里。
有了GitHub这样的代码托管网站，带来的好处是显而易见的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GitHub的代码仓库相当于在云端，理论上你甚至不需要在电脑上保留一份代码副本。不论你在何时何地，你都可以用Git把仓库的代码&lt;em&gt;pull&lt;/em&gt;或者&lt;em&gt;clone&lt;/em&gt;到本地，修改后再&lt;em&gt;push&lt;/em&gt;回这个仓库，然后你所有的修改都可以在你的GitHub主页上查看。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你不再需要担心自己的代码因为不小心摔坏了硬盘而全部丢失了，也不需要为了备份花钱去做磁盘阵列，GitHub是免费的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更重要的是，你可以在GitHub上看到大牛们公开的代码，&lt;em&gt;follow&lt;/em&gt;他们，&lt;em&gt;watch&lt;/em&gt;他们的Repository，向他们学习。遇到bug还可以给这些开源的项目提交&lt;em&gt;issue&lt;/em&gt;，更可以提交你修改的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GitHub把Git和社交融合在了一起，也把全世界的程序员连接在了一起。&lt;/p&gt;
&lt;p&gt;了解了Git和GitHub，它们和搭建一个静态博客有什么关系呢？
因为这个静态博客的每个页面，每个模板、图片、HTML文件都会被托管在GitHub上。比如点击&lt;a href=&quot;https://github.com/sosxisang/sosxisang.github.com&quot;&gt;&lt;a href=&quot;https://github.com/sosxisang/sosxisang.github.com&quot;&gt;https://github.com/sosxisang/sosxisang.github.com&lt;/a&gt;&lt;/a&gt;你就能看到这个网站的目录结构和所有的文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们所要做的，就是想办法生成这些文件，把这些文件用Git管理起来，并且放到GitHub上面，这样GitHub就会自动生成一个博客网站了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这么神？没错，这全都要归功于GitHub提供的GitHub Pages服务。&lt;/p&gt;
&lt;h2&gt;GitHub Pages服务&lt;/h2&gt;
&lt;p&gt;如果一个项目仅仅只有一堆源码放在GitHub上，就像前面看到的那样，那除了作者谁都不能一下子明白这个项目究竟能做什么。
所以为了让项目能更容易被人理解，介绍的页面肯定少不了，GitHub已经替你想到了————GitHub Pages。
创建项目主页的方法很简单。如果在项目的Repository里面建立一个特殊的分支，然后向这个分支提交静态页面，就可以建立项目主页了。&lt;/p&gt;
&lt;p&gt;那么怎样建立博客呢？
也很简单，只要建立一个特殊的代码仓库（下一篇文章会介绍），并且向这个仓库提交静态页面，即可创建个人主页，也就是一直说的博客啦。&lt;/p&gt;
&lt;p&gt;想要了解更多可以阅读&lt;a href=&quot;http://www.worldhello.net/gotgithub/03-project-hosting/050-homepage.html&quot;&gt;GotGitHub第3.5章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;讲完以上这些基础知识，在下一篇文章中就要真刀真枪地开始用Git和GitHub啦。 &lt;/p&gt;
</description>
</item>
<item>
<title>发刊词</title>
<link>http://sosxisang.github.io/articles/fa-kan-ci.html</link>
<guid>http://sosxisang.github.io/articles/fa-kan-ci.html</guid>
<author>sosxisang@gmail.com Akim</author>
<pubDate>Wed, 19 Jun 2013 00:00:00 GMT</pubDate>
<description>&lt;h1&gt;缘起&lt;/h1&gt;
&lt;p&gt;一直都想有一个自己的博客，写写计算机、编程方面的心得体会，分享的同时也可以让自己提高，多好。
可是总是感觉技术上的鸿沟太大，所以迟迟都没有去实现这个想法。好吧我承认其实我就是懒。
直到某一天，Shuyue在侃侃谈着她感兴趣的数学问题，代数几何啦分形啦数论啦，在一旁的我其实没有听懂多少。但是看着她认真讲解的样子觉得非常美好。&lt;/p&gt;
&lt;p&gt;我其实还是很喜欢数学的，但是我又不是数学系的，年龄也越来越大，所以自感要在业余时间研究那些理论，即便只是想要管中窥豹恐怕，恐怕“拼了老命”也是很难实现了。
如今在Shuyue这个好老师的教导下我感觉进入了以前从来不知道的领域，获得新知识的感觉真好。真是应该好好谢谢她。&lt;/p&gt;
&lt;p&gt;可是第二天我就把那些东西忘了差不多80%，我突然意识到很多知识是突然之间讲到某一个话题的时候引申开来的。这种突然而来的灵感很容易碰撞出火花，但也很容易堙灭在记忆中。
于是我想，应该建造这样一个博客，不光是我一个人的，也属于她，和她所钟爱的数学。&lt;/p&gt;
&lt;h1&gt;建造&lt;/h1&gt;
&lt;p&gt;借着这个契机给我带来的不知道什么时候会消失的一点动力，我开始建造这个博客。&lt;/p&gt;
&lt;p&gt;也许有人会有疑问，建立一个博客不就是在Wordpress或者新浪博客上点点鼠标就可以了么，哪有什么技术鸿沟，用得着这么百转千回么？
我想要建造的这个博客，并不是简单的基于博客服务提供商提供的技术，只需要动动鼠标，拖动模块就好了。而是一个运用了很多技术综合在一起实现的一个静态博客网站。&lt;/p&gt;
&lt;p&gt;为此我阅读了许多别人建立自己博客的经验之谈，学习许多以前从来不曾接触到的技术（git，github，jekyll，nodejs，html，json，markdown）。
在走了一些弯路之后，非常幸运地，找到了开源的&lt;a href=&quot;https://github.com/ericzhang-cn/simplog&quot;&gt;simplog&lt;/a&gt;，简化了静态化编译过程。在此感谢作者&lt;a href=&quot;http://www.weibo.com/ericzhangbuaa&quot;&gt;@敲代码的张洋&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在一番折腾之后，终于，这就是你们看到的博客。
它在github上，免费，无限流量，并且我对它所有的代码有着完全的控制权。它还有很多优点，我会在之后的文章中介绍我是怎样建造它的，我记得的话。。。&lt;/p&gt;
&lt;p&gt;这个博客只包含了我认为必须的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我想要可以离线在安静的环境下用自己喜欢的编辑工具和markdown语言来写作，而不是在网页上新建一个页面，然后在一个小小的文本框里面痛苦的敲击键盘。所以它支持markdown格式的文本解析和翻译。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我可能会写一些代码，需要它可以有代码高亮，所以它有google-code-prettiy来帮助我。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shuyue可能会要写LaTeX的数学公式，所以它有MathJax来帮助渲染LaTeX公式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当你看完一篇文章，你可能想留言或者评论，那么它支持“多说”评论系统，让你畅所欲言。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;结束语&lt;/h1&gt;
&lt;p&gt;我很高兴能把这个博客献给Shuyue和我自己。献给Shuyue是感情的表达，献给自己是因为这是我不断学习新的知识不断进步的成果。事实再一次证明，无论多么难的知识和事情，无论你是未成年还是而立之年的成人，只要努力学习，不断练习，都是可以不断进步的。&lt;/p&gt;
&lt;p&gt;那么博客的名字就顺理成章叫做Akim_Shuyue吧。（Shuyue原谅我把你放在我后面，因为ASCII码表里面S排在A后面啊T_T）&lt;/p&gt;
&lt;p&gt;在博客的名字Akim_Shuyue下面有一句话，心细的你可能已经发现了。这也是Shuyue告诉我的，我把它放在博客标题下方，因为我觉得这句话实在是太酷！&lt;/p&gt;
&lt;p&gt;伟大的德国数学家David Hilbert大卫·希尔伯特曾经曰过：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;wir müssen wissen,wir werden wissen.&lt;/p&gt;
&lt;p&gt;我们必须知道，我们必将知道。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;亲爱的读者，在这个新生的博客中，你将有会看到计算机、编程和各种数学的、科学的话题。（说不定也有很多吐槽的&lt;em&gt;(:3」∠)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;希望你会喜欢。（不喜欢也会遭到无视&lt;/p&gt;
</description>
</item>

    </channel>
</rss>
